buildscript {
    repositories {
        mavenCentral()
        jcenter()
        dependencies {
            classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
            classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.0.2'
            classpath 'com.netflix.nebula:gradle-info-plugin:2.2.+'
        }
    }
}

apply plugin: 'java'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'nebula.info'

group = 'com.smartling.connector'
description = 'Eloqua SDK'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version '1.0.0-SNAPSHOT'

ext {
    feignVersion = '8.6.0'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "com.netflix.feign:feign-core:$feignVersion"
    compile "com.netflix.feign:feign-jackson:$feignVersion"
    compile "com.netflix.feign:feign-httpclient:$feignVersion"
    compile 'org.apache.commons:commons-lang3:3.4'

    testCompile 'org.assertj:assertj-core:3.5.1'
    testCompile 'junit:junit:4.12'
    testCompile 'com.jayway.jsonpath:json-path:2.0.0'
    testCompile 'com.jayway.jsonpath:json-path-assert:2.0.0'
    testCompile 'com.github.tomakehurst:wiremock:1.56'
    testCompile 'org.mockito:mockito-core:2.0.86-beta'
}

testSets {
    integrationTest { dirName = 'integration-test' }
}

// workaround to start tests jod with passed system properties
tasks.withType(Test) {
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name 'smartling.repository.target.snapshots'
            url (project.version.contains('SNAPSHOT')
                    ? 'https://artifactory.smartling.net/artifactory/local-snapshots'
                    : 'https://artifactory.smartling.net/artifactory/local-releases')
            credentials {
                username = project.hasProperty('artifactoryUser') ? project.getProperty('artifactoryUser') : ""
                password = project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : ""
            }
        }
    }
}

ext {
    branch = project.hasProperty('branch') ? project.getProperty('branch') : project.scminfo.branch
}

task prepareSonarConfig(type: Copy) {
    doFirst {
        logger.info("Current branch is '$branch'")
    }

    from 'sonar-project.template.properties'
    into '.'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    expand(analysisMode: branch == 'master' || branch.endsWith('/master') ? 'publish' : 'preview')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}